pragma solidity >= 0.4.25 < 0.7.0;

import "IWorklist";

abstract contract <%= nodeName(processId()) %>IWorklist {

  <%  groupedIds = getWorkItemsGroupByParameters(true);
      groupedIds.forEach(idGroup => {
          var nodeId = idGroup[0]; -%>
    function <%= nodeName(nodeId) %>Start(uint<%= getParameterType(nodeId, true, true, true) %>) external virtual;
  <% }) -%>

  <%  groupedIds = getWorkItemsGroupByParameters(false);
      groupedIds.forEach(idGroup => {
          var nodeId = idGroup[0]; -%>
    function <%= nodeName(nodeId) %>Complete(uint<%= getParameterType(nodeId, false, true, true) %>) external virtual;
  <% }) -%>

}

contract <%= nodeName(processId()) %>Worklist is IWorklist {

    // Events with the information to include in the Log when a workitem is registered
<%  groupedIds = getWorkItemsGroupByParameters(true);
    groupedIds.forEach(idGroup => { -%>
    event <%= nodeName(idGroup[0]) %>Requested(uint<%= getParameterType(idGroup[0], true, true, true) %>);
<% }) -%>

    event TaskExecutionCompleted(address worklist, uint workItem);


<%  groupedIds = getWorkItemsGroupByParameters(true);
    groupedIds.forEach(idGroup => {
        var nodeId = idGroup[0]; -%>
    function <%= nodeName(nodeId) %>Start(uint elementIndex<%= getParameters(nodeId, true, true, true) %>) external {
        workitems.push(Workitem(elementIndex, msg.sender));
        emit <%= nodeName(nodeId) %>Requested(workitems.length - 1<%= getParameters(nodeId, true, false, true) %>);
    }
<% }) -%>

<%  groupedIds = getWorkItemsGroupByParameters(false);
    groupedIds.forEach(idGroup => {
        var nodeId = idGroup[0]; -%>
    function <%= nodeName(nodeId) %>(uint workitemId<%= getParameters(nodeId, false, true, true) %>) external {
        require(workitemId < workitems.length && workitems[workitemId].processInstanceAddr != address(0));
        <%= nodeName(processId()) %>IWorklist(workitems[workitemId].processInstanceAddr).<%= nodeName(nodeId) %>Complete(workitems[workitemId].elementIndex<%= getParameters(nodeId, false, false, true) %>);
        workitems[workitemId].processInstanceAddr = address(0);
        emit TaskExecutionCompleted(address(this), workitemId);
    }
<% }) -%>

}
